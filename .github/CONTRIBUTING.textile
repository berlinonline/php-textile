h1. Contributing

Please take a quick look at this document before to make contribution process easier for all parties involved.

h2. License

"BSD 3-Clause":https://github.com/textile/php-textile/blob/master/LICENSE. By contributing code, you agree to license your additions under the BSD 3-Clause license.

h2. Configure git

For convenience your committer, git user, should be linked to your GitHub account:

bc. $ git config --global user.name "John Doe"
$ git config --global user.email john.doe@example.com

Make sure to use an email address that is linked to your GitHub account. It can be a throwaway address or you can use GitHub's email protection features. We don't want your emails, but this is to make sure we know who did what. All commits nicely link to their author, instead of them coming from foobar@invalid.tld.

h2. Development environment

Development environment uses "Docker":https://www.docker.com/ and docker-compose, and relevant commands can be accessed through GNU make. For list of available commands, run:

bc. $ make help

h2. Coding standard

The project follows the "PSR-4":https://www.php-fig.org/psr/psr-4/ and "PSR-2":https://www.php-fig.org/psr/psr-2/ standards. You can use PHP_CodeSniffer to make sure your additions follow them too:

bc. $ make lint

h2. Versioning

"Semantic Versioning":https://semver.org and major.minor.path format:

* Only major versions can make incompatible API changes.
* Minor versions can add backwards-compatible features and changes.
* Patch versions should only contain fixes.

Keep backwards compatibility in mind when you do changes to the Textile language, its processing or to the application interface.

h2. Testing and code coverage

The project uses "PHPunit":https://phpunit.de for running its unit tests and "PHPStan":https://phpstan.org/ for static analysis. As much of the codebase should be covered with tests as possible. When adding new features, also add tests for them. If you find a bug, create a test that can replicate the said bug and, if possible, fix it so that the tests pass. To run tests, simply run:

bc. $ make test-unit
$ make test-static

Tests should pass before the changes can be merged to the codebase. If you create a pull requests that does not pass tests, CI will complain in the pull request thread. To get your changes merged, you should rework the code or tests until everything works smoothly.

h2. Running tests on different PHP versions and platforms

The project comes with multiple different PHP versions that can be used to run the test suite. To run tests on different PHP version, first build the target image and then run tests using it:

bc. $ make docker-build IMAGE=php_8_3
$ make test

List of available images can be found by running:

bc. $ make docker-images

h2. Creating new release

Releasing a new stable version requires replacing version references in the project source code, committing changes and creating a new tag. To do so, first run a command to bump the version:

bc. make bump

This will look for upcoming header line from CHANGELOG.textile file, and use it's included version number as the released version. It will then replace version references in source files and format the CHANGELOG.textile file, adding today's date to the upcoming header line.

You can now commit the changes and create a new tag that matches the version. Replace @0.0.0@ with your version number, make sure that the tag starts with @v@ character:

bc. $ git add -u
$ git commit -m "Version 0.0.0"
$ git push origin
$ git tag -a v0.0.0 -m v0.0.0
$ git push origin v0.0.0

There is now a new stable release available; CI will take care of creating releases to GitHub. You can then set the branch to the next development version. To do so, add a @h2. Version 0.0.0 - upcoming@ header line to CHANGELOG.textile file and run the following command:

bc. $ make bump-dev

This will replace version references in the source code with the one that was added to CHANGELOG.textile file. Replace @0.0.0@ with the version number you want to use. Then commit the changes:

bc. $ git add -u
$ git commit -m "Bumped development version"
$ git push origin
